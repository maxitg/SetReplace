version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  wolfram-language-paclet-test:
    docker:
      - image: wolframresearch/wolframengine:12.3.0
        user: root
    parallelism: 4

    steps:
      - checkout

      - run:
          name: Install Required Tools
          command: |
            apt-get update
            apt-get install -y g++ git

      - run:
          name: Activate Wolfram Engine
          command: ./scripts/activateWolframScript.sh

      - run:
          name: Build
          command: ./build.wls

      - store_artifacts:
          path: ./LibraryResources/

      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Copy libraries from other platforms
          command: cp -r /tmp/workspace/* ./LibraryResources/

      - run:
          name: Install
          command: ./install.wls

      - store_artifacts:
          path: ./BuiltPaclets/

      - run:
          name: Reinstall
          command: ./install.wls

      - run:
          name: Test
          command: ./.circleci/test.sh # This assumes parallelism: 4 and would not run all tests otherwise

      - run:
          name: Performance Test
          command: |
            if [ $CIRCLE_NODE_INDEX -eq 0 ]
            then
              ./performanceTest.wls master HEAD 2
            fi

  cpp-test:
    docker:
      - image: alpine:3.21.2
        auth:
          username: maxitg
          password: $DOCKERHUB_PASSWORD

    steps:
      - checkout

      - run:
          name: Install Required Tools
          command: |
            apk add --no-cache bash git g++ make cmake clang clang-extra-tools py-pip shellcheck grep npm
            apk add --no-cache shfmt --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
            npm install -g markdownlint-cli@0.37.0

            python3 -m venv .venv
            . .venv/bin/activate
            pip install cpplint==1.5.5

      - run:
          name: Lint
          command: |
            set +eo pipefail
            . .venv/bin/activate
            ./lint.sh
            if [ $? -ne 0 ]
            then
              echo "Please run scripts/install_git_hooks.sh to detect linting issues before git push."
              exit 1
            fi

      - run:
          name: Build
          command: |
            mkdir build
            cd build
            cmake .. -DSET_REPLACE_BUILD_TESTING=ON \
                     -DSET_REPLACE_ENABLE_ALLWARNINGS=ON
            cmake --build .

      - run:
          name: Test
          command: ./libSetReplaceTest.sh

      - store_test_results:
          path: TestResults

  cpp-32-test:
    docker:
      - image: i386/alpine:3.13.5
        auth:
          username: maxitg
          password: $DOCKERHUB_PASSWORD

    steps:
      - checkout

      - run:
          name: Install Required Tools
          command: apk add --no-cache bash git g++ make cmake

      - run:
          name: Build
          command: |
            mkdir build
            cd build
            cmake .. -DSET_REPLACE_BUILD_TESTING=ON \
                     -DSET_REPLACE_ENABLE_ALLWARNINGS=ON
            cmake --build .

      - run:
          name: Test
          command: ./libSetReplaceTest.sh

      - store_test_results:
          path: TestResults

  macos-build:
    macos:
      xcode: 16.2.0

    steps:
      - checkout

      - run:
          name: Install CMake
          command: |
            cmakeURL="https://github.com/Kitware/CMake/releases/download/v3.31.5/cmake-3.31.5-macos-universal.tar.gz"
            curl -L --output cmake.tar.gz $cmakeURL
            tar xf cmake.tar.gz
            cmakeDir=$(ls | grep cmake-*)
            sudo mkdir -p /usr/local/bin /usr/local/share
            sudo cp -r $cmakeDir/CMake.app/Contents/bin/* /usr/local/bin/
            sudo cp -r $cmakeDir/CMake.app/Contents/share/* /usr/local/share/

      - run:
          name: Build arm64
          command: scripts/buildLibraryResources.sh arm64

      - run:
          name: Build x86_64
          command: scripts/buildLibraryResources.sh x86_64

      - persist_to_workspace:
          root: LibraryResources
          paths:
            - MacOSX-x86-64
            - MacOSX-ARM64

      - store_artifacts:
          path: ./LibraryResources/

  windows-build:
    executor:
      name: win/default
      shell: bash.exe

    steps:
      - checkout

      - run:
          name: Install CMake
          command: |
            cmakeURL="https://github.com/Kitware/CMake/releases/download/v3.31.5/cmake-3.31.5-windows-x86_64.zip"
            curl -L --output cmake.zip $cmakeURL
            unzip -q cmake.zip
            cmakeDir=$(dir -1 | findstr -i cmake-*)
            echo "export PATH=\"$(pwd)/$cmakeDir/bin:$PATH\"" >> $BASH_ENV

      - run:
          name: Build
          command: scripts/buildLibraryResources.sh

      - persist_to_workspace:
          root: LibraryResources
          paths:
            - Windows-x86-64

      - store_artifacts:
          path: ./LibraryResources/

workflows:
  version: 2
  build-and-test:
    jobs:
      - macos-build
      - windows-build
      - cpp-test
      - cpp-32-test
      - wolfram-language-paclet-test:
          requires:
            - macos-build
            - windows-build
